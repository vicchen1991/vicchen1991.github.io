<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Chang Chen ScM</title>
    <link>/post/index.xml</link>
    <description>Recent content in Posts on Chang Chen ScM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Your Name</copyright>
    <lastBuildDate>Mon, 13 Mar 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>March 14, 2017 Pre-Class</title>
      <link>/post/march-14-2017-pre-class/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/march-14-2017-pre-class/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;hr /&gt;
&lt;style type=&#34;text/css&#34;&gt;
.table {

    width: 80%;
    margin-left:10%; 
    margin-right:10%;
}
&lt;/style&gt;
&lt;div id=&#34;project-goals&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Project Goals:&lt;/h1&gt;
&lt;p&gt;With this project we will simulate a famoues probability problem. This will not require knowledge of probability or statistics but only the logic to follow the steps in order to simulate this problem. This is one way to solve problems by using the computer.&lt;/p&gt;
&lt;div id=&#34;section&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Gambler’s Ruin&lt;/strong&gt;: Suppose you have a bankroll of $1000 and make bets of $100 on a fair game. By simulating the outcome directly for at most 5000 iterations of the game (or hands), estimate: a. the probability that you have “busted” (lost all your money) by the time you have placed your one hundredth bet. b. the probability that you have busted by the time you have placed your five hundredth bet by simulating the outcome directly. c. the mean time you go bust, given that you go bust within the first 5000 hands. d. the mean and variance of your bankroll after 100 hands (including busts). e. the mean and variance of your bankroll after 500 hands (including busts).&lt;/p&gt;
&lt;p&gt;Note: you &lt;em&gt;must&lt;/em&gt; stop playing if your player has gone bust. How will you handle this in the &lt;code&gt;for&lt;/code&gt; loop?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;for-this-project-i-use-the-original-meaning-of-gamblers-ruin-a-persistent-gambler-who-raises-his-bet-to-a-fixed-fraction-of-bankroll-when-he-wins-but-does-not-reduce-it-when-he-loses-will-eventually-and-inevitably-go-broke-even-if-he-has-a-positive-expected-value-on-each-bet.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;For this project, I use the original meaning of gambler’s ruin: a persistent gambler who raises his bet to a fixed fraction of bankroll when he wins, but does not reduce it when he loses, will eventually and inevitably go broke, even if he has a positive expected value on each bet.&lt;/h2&gt;
&lt;div id=&#34;a&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(a)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(epiDisplay)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: foreign&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;foreign&amp;#39; was built under R version 3.2.5&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: survival&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: MASS&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: nnet&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;GambRuinFunc=function(A,B,p)
{
  Rec=c(A)
  while(A&amp;gt;0) {
    ProbVal=runif(1)
    if(ProbVal &amp;lt;= p)
    {
      B = A+B
#A persistent gambler who raises his bet to a fixed fraction of bankroll when he wins
      A = (B+A)*0.1
    }else{
      B = B-A
#But does not reduce it when he loses
      A = A
      }
    Rec = c(Rec,A)
    if(B&amp;lt;A){break}
  }
  Duration = length(Rec)
  return(Duration)
}
set.seed(1)
Durations = numeric()
M = 5000
for(i in 1:M)
{
  NextDuration = GambRuinFunc(A=100,B=900,p=0.5)
  Durations = c(Durations,NextDuration)
}
prob100&amp;lt;-length(which(Durations&amp;lt;=100))/5000
prob100&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.119&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The probability that you have “busted” (lost all your money) by the time you have placed your one hundredth bet is 0.1192.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;b&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(b)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prob500&amp;lt;-length(which(Durations&amp;lt;=500))/5000
prob500&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.477&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The probability that you have busted by the time you have placed your five hundredth bet by simulating the outcome directly is 0.4768.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;c&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(c)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d5000&amp;lt;-Durations[which(Durations&amp;lt;=5000)]
mean(d5000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 759&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the mean time you go bust, given that you go bust within the first 5000 hand is 758.8801.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;d&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(d)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(epiDisplay)
GambRuinFunc1=function(A,B,p)
{
  Rec=c(A)
  while(A&amp;gt;0) {
    ProbVal=runif(1)
    if(ProbVal &amp;lt;= p)
    {
      B = A+B
      A = (B+A)*0.1
    }else{
      B = B-A
      A = A
      }
    Rec = c(Rec,A)
    if(length(Rec)==100){break}
    if(B&amp;lt;A){break}
  }
  Duration = length(Rec)
  return(B)
}
set.seed(1)
m100 = numeric()
M = 5000
for(i in 1:M)
{
  nextm = GambRuinFunc1(A=100,B=900,p=0.5)
  m100 = c(m100,nextm)
}
mean(m100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 896&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;var(m100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2841197&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The mean of your bankroll after 100 hands (including busts) is 895.8597; The variance of your bankroll after 100 hands (including busts) is 2841197.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;e&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(e)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(epiDisplay)
GambRuinFunc2=function(A,B,p)
{
  Rec=c(A)
  while(A&amp;gt;0) {
    ProbVal=runif(1)
    if(ProbVal &amp;lt;= p)
    {
      B = A+B
      A = (B+A)*0.1
    }else{
      B = B-A
      A = A
      }
    Rec = c(Rec,A)
    if(length(Rec)==500){break}
    if(B&amp;lt;A){break}
  }
  Duration = length(Rec)
  return(B)
}
set.seed(1)
m500 = numeric()
M = 5000
for(i in 1:M)
{
  nextm = GambRuinFunc2(A=100,B=900,p=0.5)
  m500 = c(m500,nextm)
}
mean(m500)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 574&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;var(m500)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 30074552&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The mean of your bankroll after 500 hands (including busts) is 573.5246; The variance of your bankroll after 500 hands (including busts) is 30074552.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;section-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2&lt;/h3&gt;
&lt;p&gt;Repeat the previous problem with betting on black in American roulette, where the probability of winning on any spin is 18/38 for an even payout.&lt;/p&gt;
&lt;div id=&#34;a-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(a)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(epiDisplay)
GambRuinFunc=function(A,B,p)
{
  Rec=c(A)
  while(A&amp;gt;0) {
    ProbVal=runif(1)
    if(ProbVal &amp;lt;= p)
    {
      B = A+B
      A = (B+A)*0.1
    }else{
      B = B-A
      A = A
      }
    Rec = c(Rec,A)
    if(B&amp;lt;A){break}
  }
  Duration = length(Rec)
  return(Duration)
}
set.seed(1)
Durations = numeric()
M = 5000
for(i in 1:M)
{
  NextDuration = GambRuinFunc(A=100,B=900,p=18/38)
  Durations = c(Durations,NextDuration)
}
prob100&amp;lt;-length(which(Durations&amp;lt;=100))/5000
prob100&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.173&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The probability that you have “busted” (lost all your money) by the time you have placed your one hundredth bet is 0.173.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;b-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(b)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prob500&amp;lt;-length(which(Durations&amp;lt;=500))/5000
prob500&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.63&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The probability that you have busted by the time you have placed your five hundredth bet by simulating the outcome directly is 0.6296.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;c-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(c)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d5000&amp;lt;-Durations[which(Durations&amp;lt;=5000)]
mean(d5000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 505&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the mean time you go bust, given that you go bust within the first 5000 hand is 505.1114.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;d-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(d)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(epiDisplay)
GambRuinFunc1=function(A,B,p)
{
  Rec=c(A)
  while(A&amp;gt;0) {
    ProbVal=runif(1)
    if(ProbVal &amp;lt;= p)
    {
      B = A+B
      A = (B+A)*0.1
    }else{
      B = B-A
      A = A
      }
    Rec = c(Rec,A)
    if(length(Rec)==100){break}
    if(B&amp;lt;A){break}
  }
  Duration = length(Rec)
  return(B)
}
set.seed(1)
m100 = numeric()
M = 5000
for(i in 1:M)
{
  nextm = GambRuinFunc1(A=100,B=900,p=18/38)
  m100 = c(m100,nextm)
}
mean(m100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 469&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;var(m100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 849960&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The mean of your bankroll after 100 hands (including busts) is 469.1183; The variance of your bankroll after 100 hands (including busts) is 849960.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;e-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(e)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(epiDisplay)
GambRuinFunc2=function(A,B,p)
{
  Rec=c(A)
  while(A&amp;gt;0) {
    ProbVal=runif(1)
    if(ProbVal &amp;lt;= p)
    {
      B = A+B
      A = (B+A)*0.1
    }else{
      B = B-A
      A = A
      }
    Rec = c(Rec,A)
    if(length(Rec)==500){break}
    if(B&amp;lt;A){break}
  }
  Duration = length(Rec)
  return(B)
}
set.seed(1)
m500 = numeric()
M = 5000
for(i in 1:M)
{
  nextm = GambRuinFunc2(A=100,B=900,p=18/38)
  m500 = c(m500,nextm)
}
mean(m500)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 32.9&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;var(m500)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 95787&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The mean of your bankroll after 500 hands (including busts) is 32.88478; The variance of your bankroll after 500 hands (including busts) is 95786.5.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;section-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;3&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Markov Chains&lt;/strong&gt;. Suppose you have a game where the probability of winning on your first hand is 48%; each time you win, that probability goes up by one percentage point for the next game (to a maximum of 100%, where it must stay), and each time you lose, it goes back down to 48%. Assume you cannot go bust and that the size of your wager is a constant $100.&lt;/p&gt;
&lt;div id=&#34;a-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(a)&lt;/h4&gt;
&lt;p&gt;Is this a fair game? Simulate one hundred thousand sequential hands to determine the size of your return. Then repeat this simulation 99 more times to get a range of values to calculate the expectation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;MCFunc=function(A,B,p)
{
  k=0
  prob&amp;lt;-p
  while(A&amp;gt;0) {
    ProbVal=runif(1)
    if(ProbVal &amp;lt;= p)
    {
      B = B+A
      p = p+0.01
    }else{
      B = B-A
      p = prob
    }
    k=k+1
    if(k==100000){break}
    if(B&amp;lt;A){break}
  }
  return(B)
}

size = numeric()
M = 100
for(i in 1:M)
{
  nextb = MCFunc(A=100,B=900,p=0.48)
  size = c(size,nextb)
}
mean(size)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The expectation of the size of return is 0, which means one will go busted after one hundred thousand sequential hands, so the game is not fair.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;b-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(b)&lt;/h4&gt;
&lt;p&gt;Repeat this process but change the starting probability to a new value within 2% either way. Get the expected return after 100 repetitions. Keep exploring until you have a return value that is as fair as you can make it. Can you do this automatically?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
prop = numeric()
for (j in 1:20) {
size = numeric()
M = 100
for(i in 1:M)
{
  nextb = MCFunc(A=100,B=900,p=0.46+0.002*j)
  size = c(size,nextb)
}
nextprop = length(which(size==0))/100
prop&amp;lt;-c(prop,nextprop)
}
prop&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00
## [15] 0.96 0.94 0.88 0.80 0.71 0.67&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We found that if we choose the starting probability as 0.5, the proportion of size of return equals to 0 is closest to 0.5, which means the game is fairest under the starting probability of 0.5.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;c-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(c)&lt;/h4&gt;
&lt;p&gt;Repeat again, keeping the initial probability at 48%, but this time change the probability increment to a value different from 1%. Get the expected return after 100 repetitions. Keep changing this value until you have a return value that is as fair as you can make it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;MCFunc1=function(A,B,p,step)
{
  k=0
  prob&amp;lt;-p
  while(A&amp;gt;0) {
    ProbVal=runif(1)
    if(ProbVal &amp;lt;= p)
    {
      B = B+A
      p = p+step
    }else{
      B = B-A
      p = prob
    }
    k=k+1
    if(k==100000){break}
    if(B&amp;lt;A){break}
  }
  return(B)
}

set.seed(1)
prop = numeric()
for (j in 1:20) {
size = numeric()
M = 100
for(i in 1:M)
{
  nextb = MCFunc1(A=100,B=900,p=0.48,step=0.002*j)
  size = c(size,nextb)
}
nextprop = length(which(size==0))/100
prop&amp;lt;-c(prop,nextprop)
}
prop&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 0.94 0.92 0.74 0.70 0.67 0.60
## [15] 0.57 0.57 0.50 0.39 0.38 0.34&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;0.002*17&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.034&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We found that if we choose the probability increment to 0.034, the proportion of size of return equals to 0 is 0.5, which means the game is fair under the probability increment of 0.034.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;section-3&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;4&lt;/h3&gt;
&lt;p&gt;For the last two examples in the previous question, you calculated a mean value. Because you saved these final results in a vector, use the bootstrap to estimate the variance of the return in each case for your final answer. Once you have these results, which game has the smaller variance in returns?&lt;/p&gt;
&lt;div id=&#34;for-game-1-change-the-starting-probability&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;For Game 1 (Change the starting probability)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bestp1&amp;lt;-0.5
size1 = numeric()
M = 100
for(i in 1:M)
{
  nextb = MCFunc(A=100,B=900,p=bestp1)
  size1 = c(size1,nextb)
}
###Bootstrap
set.seed(1)
bs1&amp;lt;-sample(size1,10000,replace = TRUE)
mean(bs1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 56836&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;var(bs1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10785467594&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;for-game-2-change-the-probability-increment&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;For Game 2 (Change the probability increment)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bestp2&amp;lt;-0.034
size2 = numeric()
M = 100
for(i in 1:M)
{
  nextb = MCFunc1(A=100,B=900,p=0.48,step=bestp2)
  size2 = c(size2,nextb)
}
set.seed(1)
bs2&amp;lt;-sample(size2,10000,replace = TRUE)
mean(bs2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5449959&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;var(bs2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.47e+13&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;var(bs1)/var(bs2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.000437&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The variance for game1 is 10785467594, the variance for game1 is 2.469009e+13. The proportion between the variance of two games’ sizes of return (0.0004368338) shows that the first game (Change the starting probability) has the smaller variance in returns.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>March 7, 2017 In-Class Project</title>
      <link>/post/march-7-2017-in-class-project/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/march-7-2017-in-class-project/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;div id=&#34;jackknife-for-gamma-parameters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Jackknife for Gamma Parameters&lt;/h2&gt;
&lt;p&gt;Recall our friend the method of moments estimator:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gamma.est &amp;lt;- function(the_data) {
  m &amp;lt;- mean(the_data)
  v &amp;lt;- var(the_data)
  a &amp;lt;- m^2/v
  s &amp;lt;- v/m
  return(c(a=a,s=s))
}&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;jackknife-for-gamma-parameters-function&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Jackknife for Gamma Parameters Function&lt;/h3&gt;
&lt;p&gt;Write a function called &lt;code&gt;gamma.jackknife&lt;/code&gt; that takes argument &lt;code&gt;a_vector&lt;/code&gt; and returns jackknife standard error estimates on the gamma parameters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gamma.jackknife &amp;lt;- function(a_vector) {
  n1=length(a_vector)
  estimate_a=c(n1)
  estimate_s=c(n1)
  for(i in 1:n1)
  {
    estimate_a[i]=gamma.est(a_vector[-i])[1]
    estimate_s[i]=gamma.est(a_vector[-i])[2]
  }
  se_a=sqrt((var(estimate_a))*((n1-1)^2)/n1)
  se_s=sqrt((var(estimate_s))*((n1-1)^2)/n1)
  jackknife.stderrs=c(se_a,se_s)
  return(jackknife.stderrs)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;jackknife-for-gamma-parameters-example&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Jackknife for Gamma Parameters Example&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;input &amp;lt;- rgamma(1000, shape=0.1, scale=10)
gamma.est(input)
gamma.jackknife(input)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;jackknife-for-linear-regression-coefficients&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Jackknife for linear regression coefficients&lt;/h2&gt;
&lt;p&gt;Write a function called &lt;code&gt;jackknife.lm&lt;/code&gt; that takes arguments &lt;code&gt;df&lt;/code&gt;, &lt;code&gt;formula&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; and returns jackknife standard error estimates on the coefficients of a linear regression model.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jackknife.lm &amp;lt;- function(df,formula,p) {
 n=nrow(df)
 jackknife.ests=matrix(0,nrow=p,ncol=n)
 for (i in 1:n){
   new.coefs=lm(as.formula(formula),data=df[-i,])$coefficients
   jackknife.ests[,i]=new.coefs
 }
 var=apply(jackknife.ests,1,var)
 jackknife.var=(n-1)^2/n*var
 jackknife.stderr=sqrt(jackknife.var)
  return(jackknife.stderr)
}&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;jackknife-for-linear-regression-coefficients-example&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Jackknife for linear regression coefficients Example&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;output &amp;lt;- 1.2 + 0.6*input +  rnorm(1000, 0, 2.1)
data &amp;lt;- data.frame(output,input)
my.lm &amp;lt;- lm(output~input, data=data)
coefficients(my.lm)
# &amp;quot;Official&amp;quot; standard errors
sqrt(diag(vcov(my.lm)))
jackknife.lm(df=data,formula=&amp;quot;output~input&amp;quot;,p=2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;refactoring-the-jackknife&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Refactoring the Jackknife&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Omitting one point or row is a common sub-task&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The general pattern:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;figure out the size of the data
for each case
   omit that case
   repeat some estimation and get a vector of numbers
take variances across cases
scale up variances
take the square roots&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Refactor by extracting the common “omit one” operation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Refactor by defining a general “jackknife” operation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;the-common-operation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The Common Operation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Problem&lt;/em&gt;: Omit one particular data point from a larger structure&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Difficulty&lt;/em&gt;: Do we need a comma in the index or not?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;: Works for vectors, lists, 1D and 2D arrays, matrices, data frames:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;goal&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Goal:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make the function select the correct dimensions
&lt;ul&gt;
&lt;li&gt;length for a 1d object&lt;/li&gt;
&lt;li&gt;number of rows for 2d&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a function &lt;code&gt;omit.case&lt;/code&gt; that omits a point given the data and returns the data minus that point. Make sure it can handle higher dimensions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;      omit.case &amp;lt;- function(the_data,omitted_point) {
    # This should take the data and omit one point at a time and return the new data
        dim=data(the_data)
        if (is.null(dim)||length(dim)==1){
          return(the_data[-omitted_point])
        }else{
          return(the_data[-omitted_point,])
        }
        }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a function &lt;code&gt;omit_and_est&lt;/code&gt; that takes the data with an omitted point and returns whatever function your estimator does.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;    omit_and_est &amp;lt;- function(omit) {
          # This function should take the output of omit.case and use it as input for the estimator
       estimator(omit.case(the_data,omit))

    }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jackknife &amp;lt;- function(estimator,the_data) {
  
  if(is.null(dim(the_data))){
    n=length(the_data)
  }else{
    n=nrow(the_data)
  }
  omit_and_est &amp;lt;- function(omit) {
              # This function should take the output of omit.case and use it as input for the estimator
           estimator(omit.case(the_data,omit))
          
        }
  
  
  jackknife.ests &amp;lt;- matrix(sapply(1:n, omit_and_est), ncol=n)
  var.of.reestimates &amp;lt;- apply(jackknife.ests,1,var)
  jackknife.var &amp;lt;- ((n-1)^2/n)* var.of.reestimates
  jackknife.stderr &amp;lt;- sqrt(jackknife.var)
  return(jackknife.stderr)
}&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;div id=&#34;it-works&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;It works&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean.jackknife &amp;lt;- function(a_vector) {
  a&amp;lt;-rep(0,length(a_vector))
  for (i in 1:length(a_vector)){
    a[i]&amp;lt;-mean(a_vector[-i])
  }
  jackknife.variance&amp;lt;-((length(a_vector) - 1)/length(a_vector)) * sum((a - mean(a))^2)
  jackknife.stderr&amp;lt;-sqrt(jackknife.variance)
  return(jackknife.stderr)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;some_normals=rnorm(100,mean=7,sd=5)
jackknife(estimator=mean,the_data=some_normals)
all.equal(jackknife(estimator=mean,the_data=some_normals),
          mean.jackknife(some_normals))&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all.equal(jackknife(estimator=gamma.est,the_data=data$input),
          gamma.jackknife(data$input))&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all.equal(jackknife(estimator=gamma.est,the_data=data$input),
          gamma.jackknife(data$input), check.names=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;est.coefs &amp;lt;- function(the_data) {
  return(lm(output~input,data=the_data)$coefficients)
}
est.coefs(data)
all.equal(est.coefs(data), coefficients(my.lm))&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jackknife(estimator=est.coefs,the_data=data)
all.equal(jackknife(estimator=est.coefs,the_data=data),
          jackknife.lm(df=data,formula=&amp;quot;output~input&amp;quot;,p=2))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;further-refactoring-of-jackknife&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Further Refactoring of jackknife()&lt;/h2&gt;
&lt;p&gt;The code for &lt;code&gt;jackknife()&lt;/code&gt; is still a bit clunky: - Ugly &lt;code&gt;if-else&lt;/code&gt; for finding &lt;code&gt;n&lt;/code&gt; - Bit at the end for scaling variances down to standard errors&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;write a function that calculates the &lt;code&gt;n&lt;/code&gt; needed for the above code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  data_size &amp;lt;- function(the_data) {
if (is.null(dim(the_data))){
  n=length(the_data)
}else{
  n=nrow(the_data)
}

  }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a funcrion that calculate the variance of all the estimates and returns the standard error&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scale_and_sqrt_vars &amp;lt;- function(jackknife.ests,n) {
  var=apply(jackknife.ests,1,var)
  jackknife.var=(n-1)^2/n*var
  jackknife.stderr=sqrt(jackknife.var)
  return(jackknife.stderr)
}&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;now-invoke-those-functions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Now invoke those functions&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jackknife &amp;lt;- function(estimator,the_data) {
  n &amp;lt;- data_size(the_data)
  omit_and_est &amp;lt;- function(omit) {
    estimator(omit.case(the_data,omit))
  }
  jackknife.ests &amp;lt;- matrix(sapply(1:n, omit_and_est), ncol=n)
  return(scale_and_sqrt_vars(jackknife.ests,n))
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>February 28, 2017 - In-Class Project</title>
      <link>/post/february-28-2017-in-class-project/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/february-28-2017-in-class-project/</guid>
      <description>&lt;div id=&#34;section&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ckm_nodes&amp;lt;-read.csv(&amp;quot;ckm_nodes.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;section-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(ckm_nodes$adoption_date,exclude = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15 
##   11    9    9   11   11   11   13    7    4    1    5    3    3    4    4 
##   16   17  Inf &amp;lt;NA&amp;gt; 
##    2    1   16  121&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The number pf doctors began prescribing tetracycline in each month of the study can be found in the table. 16 are never prescribed. 121 are NAs.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;section-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;3&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test&amp;lt;-ckm_nodes
test$num&amp;lt;-1:246
test&amp;lt;-test[,c(2,14)]
test&amp;lt;-test[!is.na(test$adoption_date),]
x &amp;lt;- vector(mode=&amp;quot;numeric&amp;quot;)
x&amp;lt;-test$num
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
##  [18]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34
##  [35]  35  36  37  38  39  58  70  72  73  74  75  76  77  78  79  80  81
##  [52]  82  91  92  93  94  95  96  97  98 105 108 119 121 122 123 124 125
##  [69] 126 127 128 129 130 131 132 133 134 135 136 137 151 152 153 154 155
##  [86] 156 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 195
## [103] 196 197 198 199 200 212 213 214 215 216 217 218 219 220 221 222 223
## [120] 224 225 226 227 229 241&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cleaned_nodes&amp;lt;-ckm_nodes
cleaned_nodes&amp;lt;-cleaned_nodes[x,]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;section-3&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;4&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adopters&amp;lt;-function (month, not.yet=FALSE) {
  if (not.yet==FALSE) {
    return(as.vector(cleaned_nodes$adoption_date==month))
  } else {
    return(as.vector(cleaned_nodes$adoption_date&amp;gt;month))
  }
}
adopters(2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE
##  [12] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE
##  [23] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [34] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [45] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [56]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [67] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE
##  [78] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE
##  [89] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [100] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
## [111] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [122] FALSE FALSE FALSE FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(adopters(2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 9&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;adopters(14,not.yet = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
##  [12] FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE
##  [23] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
##  [34] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE
##  [45] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE
##  [56] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
##  [67]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
##  [78] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE
##  [89]  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE
## [100] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE
## [111] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
## [122] FALSE FALSE FALSE  TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(adopters(14,not.yet = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 23&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;section-4&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;5&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;matrix&amp;lt;-read.table(&amp;quot;ckm_network.dat&amp;quot;)
clean_network&amp;lt;-matrix[x,x]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;section-5&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;6&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;contact &amp;lt;- vector(mode=&amp;quot;numeric&amp;quot;)
contact&amp;lt;-apply(clean_network,1,sum)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part 2&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;section-6&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;7&lt;/h3&gt;
&lt;div id=&#34;a&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(a)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;count_peer_pressure&amp;lt;-function(index,month) {
  k&amp;lt;-0
  v&amp;lt;-which(clean_network[index,]==1)
   for (i in v) {
     if (cleaned_nodes$adoption_date[i]&amp;lt;=month) {
       k=k+1
     }
   }
  return(k)
}
count_peer_pressure(37,5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;b&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(b)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop_peer_pressure&amp;lt;-function(index,month) {
k&amp;lt;-count_peer_pressure(index,month)
  if (k!=0) {
  return(k/length(which(clean_network[index,]==1)))
  } else {return(NaN)}
}
prop_peer_pressure(37,5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop_peer_pressure(102,14)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NaN&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;section-7&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;8&lt;/h3&gt;
&lt;div id=&#34;a-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(a)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;app&amp;lt;-function(month){
  vec&amp;lt;-which(adopters(month))
  vec1&amp;lt;-which(adopters(month,not.yet = TRUE))
  k &amp;lt;- vector(mode=&amp;quot;numeric&amp;quot;,length = length(vec))
  k1 &amp;lt;- vector(mode=&amp;quot;numeric&amp;quot;,length = length(vec1))
  for (i in 1:length(vec)) {
        k[i]&amp;lt;-prop_peer_pressure(vec[i],month)
  }
  for (i in 1:length(vec1)) {
        k1[i]&amp;lt;-prop_peer_pressure(vec1[i],month)
  }
  return(c(mean(k,na.rm = TRUE), mean(k1,na.rm = TRUE)))
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;b-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;(b)&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot1&amp;lt;-matrix(1:17, nrow=17,ncol=1)
plot2&amp;lt;-apply(plot1, 1, function(x) app(x))
plot3&amp;lt;-matrix(plot2, ncol=2,byrow=TRUE)
plot3&amp;lt;-as.data.frame(plot3)
plot3$num&amp;lt;-1:17
plot3$diff&amp;lt;-plot3$V1-plot3$V2
plot(plot3[,1],type = &amp;quot;l&amp;quot;, ylab = &amp;quot;Proportion&amp;quot;,col=1, main=&amp;quot;Proportions in/after the month&amp;quot;)
lines(plot3[,2],col=2)
legend(&amp;quot;bottomright&amp;quot;,c(&amp;quot;in the month&amp;quot;,&amp;quot;after the month&amp;quot;),col=c(1,2),lwd=1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-03-06-february-28-2017-in-class-project_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(plot3[,4],type=&amp;quot;l&amp;quot;, ylab = &amp;quot;Proportion&amp;quot;, main = &amp;quot;Difference Plot&amp;quot;)
abline(h=0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-03-06-february-28-2017-in-class-project_files/figure-html/unnamed-chunk-10-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The curve in the “Difference Plot” centers around the 0 line, which means the doctors who adopt in a given month do not consistently have more contacts who are already prescribing than the non-adopters.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>March 7, 2017 - Pre-Class</title>
      <link>/post/March-7-2017-pre-class/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/March-7-2017-pre-class/</guid>
      <description>&lt;!-- BLOGDOWN-HEAD --&gt;
&lt;!-- /BLOGDOWN-HEAD --&gt;

&lt;!-- BLOGDOWN-BODY-BEFORE --&gt;
&lt;!-- /BLOGDOWN-BODY-BEFORE --&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt; mean.jackknife &amp;lt;- function(a_vector) {
  vec&amp;lt;-rep(0,length(a_vector))
  for (i in 1:length(a_vector)){
    vec[i]&amp;lt;-mean(a_vector[-i])
  }
  jackknife.variance&amp;lt;-((length(a_vector) - 1)/length(a_vector)) * sum((vec - mean(vec))^2)
  jackknife.stderr&amp;lt;-sqrt(jackknife.variance)
  return(jackknife.stderr)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;some_normals &amp;lt;- rnorm(100,mean=7,sd=5)
mean(some_normals)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7.35254&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(formula_se_of_mean &amp;lt;- sd(some_normals)/sqrt(length(some_normals)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.5227524&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all.equal(formula_se_of_mean,mean.jackknife(some_normals))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
